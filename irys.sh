#!/usr/bin/env bash
# Irys Storage - Install + Upload helper
# Compatibilit√© : Ubuntu 20.04 / 22.04 / 24.04
# Auteur : EasyNode helper
# S√©curit√© : ne JAMAIS afficher la cl√© priv√©e. Ce script n'imprime jamais la cl√©
#           et √©vite de la logger (stdout/stderr). Attention : passer une cl√© en argument
#           √† un processus peut appara√Ætre dans la table des processus pour l'utilisateur courant.
#           Utilisez un wallet g√©n√©r√© si possible.

set -Eeuo pipefail
IFS=$'\n\t'

############################################
# Utilitaires & gestion d'erreurs
############################################
abort() {
  echo "‚ùå Erreur : $*" >&2
  exit 1
}

trap 'abort "Une erreur non g√©r√©e est survenue. Consultez les messages ci-dessus."' ERR

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || abort "Commande requise manquante : $1"
}

confirm() {
  # confirm "Message"  (Y/n)
  local msg="${1:-Continuer ?}"
  read -r -p "$msg [Y/n] " resp || true
  case "${resp:-Y}" in
    Y|y|O|o|Yes|yes|"" ) return 0 ;;
    * ) return 1 ;;
  esac
}

ask() {
  # ask "Question" "default"
  local q="${1:-}"; local def="${2:-}"
  local prompt="$q"
  [[ -n "$def" ]] && prompt+=" ($def)"
  prompt+=" : "
  read -r -p "$prompt" ans || true
  echo "${ans:-$def}"
}

ask_secret() {
  # ask_secret "Question"
  local q="${1:-Entrer une valeur secr√®te}"
  read -r -s -p "$q : " ans || true
  echo
  echo "$ans"
}

############################################
# V√©rifs pr√©alables (sudo, OS)
############################################
if [[ "$(id -u)" -ne 0 ]]; then
  if command -v sudo >/dev/null 2>&1; then
    SUDO="sudo"
  else
    abort "Ce script n√©cessite les privil√®ges administrateur. Installez sudo ou ex√©cutez en root."
  fi
else
  SUDO=""
fi

for f in /etc/os-release /etc/lsb-release; do
  [[ -f "$f" ]] && . "$f"
done
UBU_VER="${VERSION_ID:-unknown}"
case "$UBU_VER" in
  20.04|22.04|24.04) : ;;
  *) echo "‚ö†Ô∏è Ubuntu d√©tect√© : $PRETTY_NAME. Le script est test√© sur 20.04/22.04/24.04." ;;
esac

############################################
# Logs (optionnels)
############################################
LOG_CHOICE=$(ask "Voulez-vous cr√©er un dossier de logs ?" "oui")
if [[ "$LOG_CHOICE" =~ ^(o|O|y|Y|oui|Yes)$ ]]; then
  LOG_DIR="${HOME}/irys-logs"
  mkdir -p "$LOG_DIR"
  LOG_FILE="${LOG_DIR}/install_$(date +%Y%m%d_%H%M%S).log"
  # Rediriger les sorties g√©n√©rales vers le log (mais pas les saisies secr√®tes)
  exec > >(tee -a "$LOG_FILE") 2>&1
  echo "üóíÔ∏è  Les logs seront enregistr√©s ici : $LOG_FILE"
fi

############################################
# Mise √† jour syst√®me & d√©pendances
############################################
echo "üîß Mise √† jour du syst√®me (apt-get update/upgrade)..."
$SUDO apt-get update -y
$SUDO DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

echo "üì¶ Installation des paquets requis (curl, git, build-essential, jq, imagemagick, openssl, ca-certificates, gnupg)..."
$SUDO apt-get install -y curl git build-essential jq imagemagick openssl ca-certificates gnupg

############################################
# Installation Node.js 20.x + npm
############################################
install_node() {
  echo "‚¨áÔ∏è Installation de Node.js 20.x (NodeSource)..."
  curl -fsSL https://deb.nodesource.com/setup_20.x | $SUDO -E bash -
  $SUDO apt-get install -y nodejs
}

if command -v node >/dev/null 2>&1; then
  NODE_V=$(node -v | sed 's/^v//')
  NODE_MAJOR="${NODE_V%%.*}"
  if [[ "${NODE_MAJOR:-0}" -lt 20 ]]; then
    echo "‚ÑπÔ∏è Node.js ${NODE_V} d√©tect√© (<20). Mise √† niveau vers Node 20..."
    install_node
  else
    echo "‚úÖ Node.js $NODE_V OK (>=20)"
  fi
else
  install_node
fi

require_cmd node
require_cmd npm

echo "üîé Versions : node=$(node -v) | npm=$(npm -v)"

############################################
# Installation Irys CLI
############################################
echo "‚¨áÔ∏è Installation Irys CLI global : @irys/cli ..."
# On tente sans sudo d'abord. Si √ßa √©choue (permissions), on r√©essaie avec sudo.
if ! npm i -g @irys/cli >/dev/null 2>&1; then
  echo "‚ö†Ô∏è Requ√™te d'√©l√©vation (sudo) pour installer la CLI globalement..."
  $SUDO npm i -g @irys/cli
fi

# V√©rification binaire
if ! command -v irys >/dev/null 2>&1; then
  abort "Irys CLI introuvable apr√®s installation."
fi
echo "‚úÖ Irys CLI install√©e : $(irys --version 2>/dev/null || echo 'version inconnue')"

############################################
# Pr√©paration utilitaires Node (ethers) pour cl√©s/addresses
############################################
WORKDIR="$(mktemp -d -t irys-node-XXXXXX)"
cleanup() { rm -rf "$WORKDIR" || true; }
trap cleanup EXIT

pushd "$WORKDIR" >/dev/null
npm init -y >/dev/null 2>&1
npm install ethers@6 >/dev/null 2>&1
popd >/dev/null

node_derive() {
  # $1 = PRIVATE_KEY (optionnel). Si absent => g√©n√©ration al√©atoire
  node -e 'const {Wallet}=require("'"$WORKDIR"'/node_modules/ethers"); 
    const pk=process.env.PK;
    if(pk){ 
      try{ const w=new Wallet(pk); 
        console.log(JSON.stringify({address:w.address})); 
      }catch(e){ console.error("invalid"); process.exit(1); }
    } else { 
      const w=Wallet.createRandom(); 
      console.log(JSON.stringify({address:w.address, privateKey:w.privateKey, mnemonic:(w.mnemonic?.phrase||"")}));
    }' 2>/dev/null
}

############################################
# Param√©trage : r√©seau, RPC, token
############################################
echo "üåê Choix du r√©seau Irys pour la facturation (token EVM)."
IRYS_NET=$(ask "R√©seau : mainnet ou devnet ?" "devnet")
case "$IRYS_NET" in
  mainnet|MAINNET) IRYS_NET="mainnet" ;;
  devnet|DEVNET|"") IRYS_NET="devnet" ;;
  *) echo "Valeur inconnue, bascule sur devnet."; IRYS_NET="devnet" ;;
esac

# Token (EVM). Par d√©faut 'ethereum'
TOKEN=$(ask "Token de paiement (EVM) (ex: ethereum, base-eth, linea-eth, polygon, arbitrum, scroll, ...)" "ethereum")

# RPC URL (utile surtout en devnet). Valeur par d√©faut pour Sepolia.
DEFAULT_RPC="https://rpc.sepolia.dev"
if [[ "$IRYS_NET" == "devnet" ]]; then
  RPC_URL=$(ask "RPC URL (devnet) √† utiliser (laisser vide pour d√©faut)" "$DEFAULT_RPC")
else
  RPC_URL=$(ask "RPC URL (mainnet) √† utiliser (optionnel, Enter pour ignorer)" "")
fi

############################################
# Wallet : fourniture cl√© priv√©e OU g√©n√©ration
############################################
echo "üîê Choisissez une option de wallet :"
echo "  1) J'ai d√©j√† une cl√© priv√©e (EVM, hex 0x...)"
echo "  2) G√©n√©rer un nouveau wallet (recommand√© pour d√©buter)"
CHOICE=$(ask "Votre choix" "2")

PRIVATE_KEY=""
ADDRESS=""
MNEMONIC=""

if [[ "$CHOICE" == "1" ]]; then
  PRIVATE_KEY=$(ask_secret "‚û°Ô∏è  Entrez votre cl√© priv√©e EVM (elle ne sera pas affich√©e)")
  [[ -z "$PRIVATE_KEY" ]] && abort "Cl√© priv√©e vide."
  # Deriver l'adresse depuis la cl√© (Node + ethers)
  ADDR_JSON="$(PK="$PRIVATE_KEY" node_derive || true)"
  [[ "$ADDR_JSON" == "invalid" || -z "$ADDR_JSON" ]] && abort "Cl√© priv√©e invalide."
  ADDRESS="$(echo "$ADDR_JSON" | jq -r '.address')"
  echo "‚úÖ Adresse d√©riv√©e : $ADDRESS"
else
  echo "ü™™ G√©n√©ration d'un wallet..."
  GEN_JSON="$(node_derive)"
  ADDRESS="$(echo "$GEN_JSON" | jq -r '.address')"
  PRIVATE_KEY="$(echo "$GEN_JSON" | jq -r '.privateKey')"
  MNEMONIC="$(echo "$GEN_JSON" | jq -r '.mnemonic')"
  echo "‚úÖ Nouveau wallet : $ADDRESS"
  # Sauvegarde s√ªre dans le HOME (chmod 600)
  SEC_DIR="${HOME}/.irys-wallet"
  mkdir -p "$SEC_DIR"
  WALLET_FILE="${SEC_DIR}/wallet_$(date +%Y%m%d_%H%M%S).json"
  umask 077
  cat > "$WALLET_FILE" <<JSON
{"address":"$ADDRESS","privateKey":"$PRIVATE_KEY","mnemonic":"$MNEMONIC"}
JSON
  chmod 600 "$WALLET_FILE"
  echo "üîí Cl√©s sauvegard√©es en local (chmod 600) : $WALLET_FILE"
  echo "‚ÑπÔ∏è  Gardez-les en s√©curit√©. Ne partagez jamais votre cl√© priv√©e."
fi

############################################
# V√©rification du solde Irys (via CLI)
############################################
echo "üí∞ V√©rification du solde (Irys balance) pour $ADDRESS ..."
BAL_ARGS=(-t "$TOKEN")
[[ "$IRYS_NET" == "devnet" ]] && BAL_ARGS+=(-n devnet)
[[ -n "${RPC_URL:-}" ]] && BAL_ARGS+=(--provider-url "$RPC_URL")

# balance ne n√©cessite pas la cl√© priv√©e
if ! irys balance "$ADDRESS" "${BAL_ARGS[@]}"; then
  echo "‚ö†Ô∏è Impossible de lire le solde. V√©rifiez la connexion r√©seau / RPC."
fi

echo
echo "üëâ Si votre solde est insuffisant :"
echo "   - R√©alisez un faucet/approvisionnement sur l'adresse : $ADDRESS"
if [[ "$IRYS_NET" == "devnet" ]]; then
  echo "   - R√©seau devnet (ex: Sepolia). Un RPC par d√©faut est configur√©."
fi
confirm "Avez-vous des fonds suffisants pour l‚Äôupload (sinon, pressez 'n' et refaites un faucet) ?" || {
  echo "‚ÑπÔ∏è  Annulation √† votre demande. Relancez le script apr√®s avoir cr√©dit√© le wallet."
  exit 0
}

############################################
# S√©lection du contenu √† uploader
############################################
echo "üñºÔ∏è Que souhaitez-vous uploader ?"
echo "  1) Un fichier"
echo "  2) Un dossier"
echo "  3) G√©n√©rer une image al√©atoire (PNG 512x512) et l'uploader"
SEL=$(ask "Votre choix" "3")

TARGET_PATH=""
CONTENT_TYPE=""

case "$SEL" in
  1)
    TARGET_PATH="$(ask "Chemin du fichier √† uploader (ex: /home/USER/image.png)" "")"
    [[ -z "$TARGET_PATH" || ! -f "$TARGET_PATH" ]] && abort "Fichier introuvable : $TARGET_PATH"
    # Tentative de d√©tection Content-Type simple
    case "${TARGET_PATH##*.}" in
      png) CONTENT_TYPE="image/png" ;;
      jpg|jpeg) CONTENT_TYPE="image/jpeg" ;;
      gif) CONTENT_TYPE="image/gif" ;;
      json) CONTENT_TYPE="application/json" ;;
      *) CONTENT_TYPE="" ;;
    esac
    ;;
  2)
    TARGET_PATH="$(ask "Chemin du dossier √† uploader (ex: /home/USER/mon_dossier)" "")"
    [[ -z "$TARGET_PATH" || ! -d "$TARGET_PATH" ]] && abort "Dossier introuvable : $TARGET_PATH"
    ;;
  3|*)
    # G√©n√©ration image al√©atoire
    RAND_DIR="${HOME}/irys-uploads"
    mkdir -p "$RAND_DIR"
    TARGET_PATH="${RAND_DIR}/random_$(date +%Y%m%d_%H%M%S).png"
    # ImageMagick : cr√©er une image bruit√©e al√©atoire 512x512
    echo "üß™ G√©n√©ration d'une image al√©atoire : $TARGET_PATH"
    convert -size 512x512 xc:white +noise Random "$TARGET_PATH"
    [[ ! -f "$TARGET_PATH" ]] && abort "Echec g√©n√©ration de l'image."
    CONTENT_TYPE="image/png"
    ;;
esac

############################################
# Upload avec Irys CLI
############################################
echo "üöÄ Upload en cours via Irys CLI..."
UP_ARGS=(-t "$TOKEN")
[[ "$IRYS_NET" == "devnet" ]] && UP_ARGS+=(-n devnet)
[[ -n "${RPC_URL:-}" ]] && UP_ARGS+=(--provider-url "$RPC_URL")

# IMPORTANT : on n'affiche pas la cl√© priv√©e, ni la commande compl√®te.
# La CLI exige -w <cl√©>. On imprime uniquement des messages neutres.
if [[ -f "$TARGET_PATH" ]]; then
  echo "   ‚Ä¢ Fichier : $TARGET_PATH"
  # Optionnel : ajouter un tag Content-Type si connu
  if [[ -n "$CONTENT_TYPE" ]]; then
    echo "   ‚Ä¢ Tag Content-Type : $CONTENT_TYPE"
    # On ex√©cute la commande en silence (sans √©cho de la cl√©), seules les sorties de la CLI seront visibles
    irys upload "$TARGET_PATH" "${UP_ARGS[@]}" -w "$PRIVATE_KEY" --tags "Content-Type $CONTENT_TYPE"
  else
    irys upload "$TARGET_PATH" "${UP_ARGS[@]}" -w "$PRIVATE_KEY"
  fi
else
  echo "   ‚Ä¢ Dossier : $TARGET_PATH"
  irys upload-dir "$TARGET_PATH" "${UP_ARGS[@]}" -w "$PRIVATE_KEY"
fi

echo
echo "‚úÖ Termin√©."
echo "üîó Si la CLI a affich√© une URL gateway.irys.xyz, c'est votre lien de t√©l√©chargement."
echo "üí° Astuce : Conservez votre fichier wallet ($SEC_DIR) si vous avez g√©n√©r√© une cl√©."
echo "üõ°Ô∏è  S√©curit√© : Ne partagez JAMAIS votre cl√© priv√©e."
